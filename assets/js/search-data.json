{
  
    
        "post0": {
            "title": "빅데이터 개론 복습1",
            "content": "&#54364;&#54788;&#49885;&#44284; &#48320;&#49688; . hour_rate = 10000 month_working_days = 20 day_working_hours = 4 month_pay = hour_rate * month_working_days * day_working_hours month_pay . 800000 . text_2 =&#39;you can &#39;t come&#39; #역슬래시로 구분하기 text_2 . &#34;you can&#39;t come&#34; . print(&quot;첫 번째 줄 n두 번째 줄&quot;) . 첫 번째 줄 두 번째 줄 . text_4 = &#39;C: some name&#39; print(text_4) . C: some ame . text_5 = r&#39;C: some name&#39; print(text_5) . C: some name . 라이브러리와 함수 | . import math . math.sin(2) . 0.9092974268256817 . math.log(100) . 4.605170185988092 . 리스트 | . list_1 = [1, 2, 0.5, &#39;chair&#39;] list_1 . [1, 2, 0.5, &#39;chair&#39;] . list_2 = [ list_1, &quot;A&quot;, [1,2,3] ] list_2 . [[1, 2, 0.5, &#39;chair&#39;], &#39;A&#39;, [1, 2, 3]] . 파이썬의 인덱스는 1이 아닌 0 부터 시작하므로 이를 언제나 유념해야 한다 . squares = [1, 4, 9, 16, 25] . squares[0] . 1 . squares[4] . 25 . squares[:1] . [1] . squares[:-1] . [1, 4, 9, 16] . squares[-1:] . [25] . 1 in [1, 2, 3, 4] . True . a = 5 a in [1, 2, 3, 4, 5] . True . &#49892;&#49845; . hstudent.csv&#39;는 20명의 고등학생 성별, 학년, 키(cm), 몸무게(kg)를 조사한 자료이다. | 체질량지수는 몸무게(kg)를 키의 제곱(m)으로 나눈 값입니다. 5번 학생의 체질량지수는? | 10번 학생의 체질량지수는? | . | 학생의 키와 몸무게를 각각 height와 weight에 저장하고, height와 weight를 사용하여 체질량지수 계산 5번 과 10번 학생 각각에 대하여 계산한 후 bmi5와 bmi10에 저장 | bmi5와 bmi10의 크기 비교 결과 print함수를 사용하여 보여주기 | . | 1번부터 5번까지의 학생 키를 원소로 가지는 리스트 변수 height1_5생성 1번부터 3번까지 학생의 키 추출 | . | . 나는 전북대학교 학과 이름 입니다. (예, 나는 전북대학교 통계학과 최혜미입니다) 위 문자열을 값으로 가지는 변수 name_dept를 생성 | 변수 name_dept에서 전북대학교 추출 | . | df = pd.read_csv(&quot;hstudent.csv&quot;) df . gender grade height weight . 0 1 | 3 | 183 | 82 | . 1 2 | 1 | 168 | 52 | . 2 2 | 1 | 160 | 48 | . 3 2 | 2 | 160 | 50 | . 4 1 | 1 | 160 | 79 | . 5 1 | 2 | 180 | 73 | . 6 2 | 2 | 183 | 60 | . 7 1 | 1 | 170 | 66 | . 8 1 | 3 | 170 | 74 | . 9 1 | 3 | 185 | 57 | . 10 1 | 2 | 165 | 54 | . 11 2 | 1 | 170 | 50 | . 12 2 | 1 | 152 | 60 | . 13 2 | 3 | 173 | 63 | . 14 1 | 1 | 145 | 57 | . 15 1 | 3 | 163 | 77 | . 16 2 | 2 | 178 | 50 | . 17 2 | 2 | 163 | 57 | . 18 2 | 2 | 168 | 54 | . 19 2 | 3 | 170 | 57 | . height = df[&#39;height&#39;] weight = df[&#39;weight&#39;] . bmi5 = weight[4]/height[4]**2 bmi10 = weight[9]/height[9]**2 print(bmi5, bmi10) . 0.0030859375 0.0016654492330168006 . height1_5 = height[0:5] height1_5[0:3] . 0 183 1 168 2 160 Name: height, dtype: int64 . height1_5 = list(height[0:5]) height1_5[0:3] . [183, 168, 160] . # weight = [82, 52, 48, 50, 79, 73, 60, 66, 74, 57, 54, 50, 60, 63, 57, 77, 50, 57, 54, 57] . name_debt = &quot;나는 전북대학교 스페인중남미학과 김혜지입니다.&quot; name_debt[3:8] . &#39;전북대학교&#39; . &#54032;&#45796;&#49828; &#45936;&#51060;&#53552; &#54532;&#47112;&#51076; . import pandas as pd . df = pd.DataFrame({ &#39;name&#39; : [&#39;이철수&#39;, &#39;김영희&#39;, &#39;홍길동&#39;, &#39;John Smith&#39;], &#39;sex&#39; : [&#39;M&#39;, &#39;F&#39;, &#39;M&#39;, &#39;M&#39;], &#39;age&#39; : [23, 25, 21, 33] }) . df . name sex age . 0 이철수 | M | 23 | . 1 김영희 | F | 25 | . 2 홍길동 | M | 21 | . 3 John Smith | M | 33 | . 슬라이싱 | . df[[&#39;name&#39;, &#39;age&#39;]] #두 개 이상의 열을 슬라이싱 하기위해서는 리스트를 사용하기 . name age . 0 이철수 | 23 | . 1 김영희 | 25 | . 2 홍길동 | 21 | . 3 John Smith | 33 | . #데이터 프레임 열을 슬라이스 하는 경우는 마침표 사용해서 슬라이싱이 가능 df.age . 0 23 1 25 2 21 3 33 Name: age, dtype: int64 . df[df[&#39;age&#39;] &gt;= 25] #df[&#39;age&#39;] &gt;= 25는 참, 거짓으로 구성된 시리즈 -&gt; 슬라이싱 하기 위해서는 df을 한 번 더 씌어주면 됨 . name sex age . 1 김영희 | F | 25 | . 3 John Smith | M | 33 | . 데이터 프레임 메소드 | . df.describe() #describe() : 숫자로 구성된 열의 기초 통계량을 구하는 표현식 . age . count 4.000000 | . mean 25.500000 | . std 5.259911 | . min 21.000000 | . 25% 22.500000 | . 50% 24.000000 | . 75% 27.000000 | . max 33.000000 | . df.max() #각 열의 최대값을 구하는 작업을 수행 ?왜 맥스 값을 찍었는데 홍길동 이름이 나오지? #한글은 가나다순, 영어는 알파벳 순으로 max값이 뽑힌다. . name 홍길동 sex M age 33 dtype: object . df.shape . (4, 3) . df.iloc[1,0] . &#39;김영희&#39; . df.iloc[2,2] . 21 . &#47928;&#51228;1 . 사진과 같은 데이터 프레임 만들기 | 데이터 프레임의 shape를 출력 | 평균 면적(area)을 계산하여라 | 인구수가 2000만명 이하인 주들을 골라내어라. 또한 해당하는 주의 평균 밀도를 구해보아라 | 첫 3개의 행과 첫 2개의 열로 이루어진 sub-dataframe을 추출하여라 | New York의 인구(pop)를 추출하여라 | df = pd.DataFrame({&quot;area&quot; : [423967, 695662, 141297, 170312, 149995], &quot;pop1&quot; : [38332521, 26448193, 19651127, 19552860, 12882135], &quot;density&quot; : [90.000000, 38.018740, 139.076746, 114.806121, 85.883763] }, index = [&quot;Califonia&quot;, &quot;Texas&quot;, &quot;New York&quot;, &quot;Flprida&quot;, &quot;Illinois&quot;]) df . area pop1 density . Califonia 423967 | 38332521 | 90.000000 | . Texas 695662 | 26448193 | 38.018740 | . New York 141297 | 19651127 | 139.076746 | . Flprida 170312 | 19552860 | 114.806121 | . Illinois 149995 | 12882135 | 85.883763 | . df.shape . (5, 3) . df[&quot;area&quot;].mean() #mean다음에 괄호 잊지 말기 () 중요!! . 316246.6 . df[df[&quot;pop1&quot;] &lt;= 20000000][&quot;density&quot;].mean() #mean() 다음에 괄호 필수, 데이터 프레임 옆에 붙여서 밀도의 평균 계산 가능 . 113.25554333333334 . df.iloc[:3,:2] # iloc 사용하기 . area pop1 . Califonia 423967 | 38332521 | . Texas 695662 | 26448193 | . New York 141297 | 19651127 | . df.iloc[2,1] . 19651127 . df[&quot;pop1&quot;][&quot;New York&quot;] # df를 뽑으려면 무조건 열 먼저 실행 후 행 선택하기(행 먼저하면 오류 발생) . 19651127 . &#44256;&#49549;&#50676;&#52264; &#50668;&#44061; &#49688;&#49569;&#51088;&#47308; . import pandas as pd import matplotlib.pyplot as plt from matplotlib import rc %matplotlib inline rc(&#39;font&#39;, family=&#39;AppleGothic&#39;) plt.rcParams[&#39;axes.unicode_minus&#39;] = False plt.rcParams[&quot;figure.figsize&quot;] = (10,5) . url =&quot;https://ilovedata.github.io/teaching/bigdata2/data/train-data-01.csv&quot; train_raw_data = pd.read_csv(url) train_raw_data . TRAIN_NO DATE STATION_DEPART STATION_ARRV NUM_PASSENGER . 0 2 | 20190701 | 서울 | 대전 | 106.0 | . 1 2 | 20190702 | 서울 | 대전 | 113.0 | . 2 2 | 20190703 | 서울 | 대전 | 146.0 | . 3 2 | 20190704 | 서울 | 대전 | 84.0 | . 4 2 | 20190705 | 서울 | 대전 | 105.0 | . ... ... | ... | ... | ... | ... | . 1764 6 | 20190726 | 울산 | 부산 | 10.0 | . 1765 6 | 20190727 | 울산 | 부산 | 6.0 | . 1766 6 | 20190728 | 울산 | 부산 | 21.0 | . 1767 6 | 20190729 | 울산 | 부산 | 12.0 | . 1768 6 | 20190730 | 울산 | 부산 | 11.0 | . 1769 rows × 5 columns . num_train = train_raw_data[&quot;TRAIN_NO&quot;].unique() num_train . array([2, 5, 6]) . 다음 3개의 조건을 모두 만족하는 행들을 추출 . 열차번호가 2번이다. . 출발역은 서울역이다. . 도착역은 부산역이다. . a = train_raw_data[&quot;TRAIN_NO&quot;] == 2 b = train_raw_data[&quot;STATION_DEPART&quot;] == &quot;서울&quot; c = train_raw_data[&quot;STATION_ARRV&quot;] == &quot;부산&quot; d = a &amp; b &amp; c d . 0 False 1 False 2 False 3 False 4 False ... 1764 False 1765 False 1766 False 1767 False 1768 False Length: 1769, dtype: bool . train2 = train_raw_data[d] #습관처럼 df에 넣지 말자 정의된 데이터 프레임에 넣어야 한다. df[a] 이렇게 표현할 수 있는 이유는 df가 정의되어 있는 데이터 프레임이기 때문이다. . train2 . TRAIN_NO DATE STATION_DEPART STATION_ARRV NUM_PASSENGER . 60 2 | 20190701 | 서울 | 부산 | 613.0 | . 61 2 | 20190702 | 서울 | 부산 | 546.0 | . 62 2 | 20190703 | 서울 | 부산 | 492.0 | . 63 2 | 20190704 | 서울 | 부산 | 615.0 | . 64 2 | 20190705 | 서울 | 부산 | 572.0 | . 65 2 | 20190706 | 서울 | 부산 | 598.0 | . 66 2 | 20190707 | 서울 | 부산 | 326.0 | . 67 2 | 20190708 | 서울 | 부산 | 552.0 | . 68 2 | 20190709 | 서울 | 부산 | 540.0 | . 69 2 | 20190710 | 서울 | 부산 | 499.0 | . 70 2 | 20190711 | 서울 | 부산 | 562.0 | . 71 2 | 20190712 | 서울 | 부산 | 601.0 | . 72 2 | 20190713 | 서울 | 부산 | 655.0 | . 73 2 | 20190714 | 서울 | 부산 | 371.0 | . 74 2 | 20190715 | 서울 | 부산 | 557.0 | . 75 2 | 20190716 | 서울 | 부산 | 525.0 | . 76 2 | 20190717 | 서울 | 부산 | 557.0 | . 77 2 | 20190718 | 서울 | 부산 | 585.0 | . 78 2 | 20190719 | 서울 | 부산 | 593.0 | . 79 2 | 20190720 | 서울 | 부산 | 620.0 | . 80 2 | 20190721 | 서울 | 부산 | 355.0 | . 81 2 | 20190722 | 서울 | 부산 | 548.0 | . 82 2 | 20190723 | 서울 | 부산 | 557.0 | . 83 2 | 20190724 | 서울 | 부산 | 550.0 | . 84 2 | 20190725 | 서울 | 부산 | 593.0 | . 85 2 | 20190726 | 서울 | 부산 | 551.0 | . 86 2 | 20190727 | 서울 | 부산 | 615.0 | . 87 2 | 20190728 | 서울 | 부산 | 530.0 | . 88 2 | 20190729 | 서울 | 부산 | 589.0 | . 89 2 | 20190730 | 서울 | 부산 | 503.0 | . train2.plot(x=&#39;DATE&#39;, y=&quot;NUM_PASSENGER&quot;) #날짜별 승객데이터 확인 가능 . &lt;AxesSubplot:xlabel=&#39;DATE&#39;&gt; . to_datetime() :날짜 형식 변환 ex)format=&#39;%Y%m%d&#39; . train2[&#39;DATE2&#39;] = pd.to_datetime(train2[&#39;DATE&#39;], format=&#39;%Y%m%d&#39;) train2 . /var/folders/xh/xtwkcbrj0_l1srsb4r5pc3l00000gn/T/ipykernel_25499/279216404.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy train2[&#39;DATE2&#39;] = pd.to_datetime(train2[&#39;DATE&#39;], format=&#39;%Y%m%d&#39;) . TRAIN_NO DATE STATION_DEPART STATION_ARRV NUM_PASSENGER DATE2 . 60 2 | 20190701 | 서울 | 부산 | 613.0 | 2019-07-01 | . 61 2 | 20190702 | 서울 | 부산 | 546.0 | 2019-07-02 | . 62 2 | 20190703 | 서울 | 부산 | 492.0 | 2019-07-03 | . 63 2 | 20190704 | 서울 | 부산 | 615.0 | 2019-07-04 | . 64 2 | 20190705 | 서울 | 부산 | 572.0 | 2019-07-05 | . 65 2 | 20190706 | 서울 | 부산 | 598.0 | 2019-07-06 | . 66 2 | 20190707 | 서울 | 부산 | 326.0 | 2019-07-07 | . 67 2 | 20190708 | 서울 | 부산 | 552.0 | 2019-07-08 | . 68 2 | 20190709 | 서울 | 부산 | 540.0 | 2019-07-09 | . 69 2 | 20190710 | 서울 | 부산 | 499.0 | 2019-07-10 | . 70 2 | 20190711 | 서울 | 부산 | 562.0 | 2019-07-11 | . 71 2 | 20190712 | 서울 | 부산 | 601.0 | 2019-07-12 | . 72 2 | 20190713 | 서울 | 부산 | 655.0 | 2019-07-13 | . 73 2 | 20190714 | 서울 | 부산 | 371.0 | 2019-07-14 | . 74 2 | 20190715 | 서울 | 부산 | 557.0 | 2019-07-15 | . 75 2 | 20190716 | 서울 | 부산 | 525.0 | 2019-07-16 | . 76 2 | 20190717 | 서울 | 부산 | 557.0 | 2019-07-17 | . 77 2 | 20190718 | 서울 | 부산 | 585.0 | 2019-07-18 | . 78 2 | 20190719 | 서울 | 부산 | 593.0 | 2019-07-19 | . 79 2 | 20190720 | 서울 | 부산 | 620.0 | 2019-07-20 | . 80 2 | 20190721 | 서울 | 부산 | 355.0 | 2019-07-21 | . 81 2 | 20190722 | 서울 | 부산 | 548.0 | 2019-07-22 | . 82 2 | 20190723 | 서울 | 부산 | 557.0 | 2019-07-23 | . 83 2 | 20190724 | 서울 | 부산 | 550.0 | 2019-07-24 | . 84 2 | 20190725 | 서울 | 부산 | 593.0 | 2019-07-25 | . 85 2 | 20190726 | 서울 | 부산 | 551.0 | 2019-07-26 | . 86 2 | 20190727 | 서울 | 부산 | 615.0 | 2019-07-27 | . 87 2 | 20190728 | 서울 | 부산 | 530.0 | 2019-07-28 | . 88 2 | 20190729 | 서울 | 부산 | 589.0 | 2019-07-29 | . 89 2 | 20190730 | 서울 | 부산 | 503.0 | 2019-07-30 | . train2.plot(x=&#39;DATE2&#39;, y=&quot;NUM_PASSENGER&quot;); . &#44536;&#47353;&#48324; &#48516;&#49437; .",
            "url": "https://g-gg-ggg.github.io/Oppps/python/2022/09/29/(d%EA%B0%9C%EB%A1%A0).html",
            "relUrl": "/python/2022/09/29/(d%EA%B0%9C%EB%A1%A0).html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "더하기",
            "content": "1+1 . 2 . 2+3 . 5 .",
            "url": "https://g-gg-ggg.github.io/Oppps/2022/09/28/test.html",
            "relUrl": "/2022/09/28/test.html",
            "date": " • Sep 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "데이터 시각화 과제",
            "content": "import numpy as np import matplotlib.pyplot as plt import pandas as pd . np.random.seed(43052) ϵ = np.random.randn(100) . plt.plot(np.arange(1,101),ϵ,&#39;--o&#39;) . [&lt;matplotlib.lines.Line2D at 0x7fb6e05a3df0&gt;] . (1) $ epsilon_t$ 와 $ epsilon_{t-1}$은 독립이라고 보여지는가? . 독립이다. . (2) 아래의 수식을 만족하는 벡터 ${ boldsymbol y} = (y_1,y_2, dots, y_{100})$ 을 생성하라. (단 $y_1= epsilon_1$) . $$ y_t = y_{t-1} + epsilon_t$$ . (3) $(t,y_t)$의 dot-connected plot을 그려라. . (4) $y_t$와 $y_{t-1}$은 독립이라고 볼 수 있는가? . $y_{t-1}$이 변할때 $y_t$가 변하기에 독립이라고 볼 수 없다 .",
            "url": "https://g-gg-ggg.github.io/Oppps/python/2022/09/27/%EA%B3%BC%EC%A0%9C(%EC%96%B4%EB%A0%A4%EC%9B%80).html",
            "relUrl": "/python/2022/09/27/%EA%B3%BC%EC%A0%9C(%EC%96%B4%EB%A0%A4%EC%9B%80).html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "데이터 시각화4",
            "content": "",
            "url": "https://g-gg-ggg.github.io/Oppps/python/2022/09/23/.html",
            "relUrl": "/python/2022/09/23/.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "데이터 시각화3",
            "content": "&#47928;&#51228;1 . import matplotlib.pyplot as plt import numpy as np . fig, axs = plt.subplots(2, 3) . x,y = [1,2,3,4], [1,2,4,3] axs[0,0].plot(x, y,&#39;or&#39;) axs[1,0].plot(x, y,&#39;--or&#39;) axs[0,1].plot(x, y,&#39;og&#39;) axs[1,1].plot(x, y,&#39;--og&#39;) axs[0,2].plot(x, y,&#39;ob&#39;) axs[1,2].plot(x, y,&#39;--ob&#39;) fig . &#47928;&#51228;2 . fig = plt.figure() ax1 = fig.add_axes([0.5,0.5,1,1]) # (0,0)의 위치에 (1,1)인 액시즈(=네모틀)을 만들어라. ax2 = fig.add_axes([1.0,1.0,1,1]) ax3 = fig.add_axes([1.5,1.5,1,1]) ax1,ax2,ax3 = fig.axes fig.axes . [&lt;Axes:&gt;, &lt;Axes:&gt;, &lt;Axes:&gt;] . x,y = [1,2,3,4], [1,2,1,1] ax1.plot(x, y, &quot;or&quot;) ax2.plot(x, y, &quot;og&quot;) ax3.plot(x, y, &quot;ob&quot;) fig . &#47928;&#51228; 3 . x = np.arange(-5,5,0.1) y1 = np.sin(x) y2 = np.sin(2*x) + 2 y3 = np.sin(4*x) + 4 y4 = np.sin(8*x) + 6 . plt.plot(x, y1, &quot;--r&quot;) plt.plot(x, y2, &quot;--g&quot;) plt.plot(x, y3, &quot;--b&quot;) plt.plot(x, y4, &quot;--m&quot;) . [&lt;matplotlib.lines.Line2D at 0x7fd28a798400&gt;] .",
            "url": "https://g-gg-ggg.github.io/Oppps/python/2022/09/22/fig-axes.html",
            "relUrl": "/python/2022/09/22/fig-axes.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "데이터 시각화2",
            "content": "!pip install opencv-python . Requirement already satisfied: opencv-python in /Users/heji/opt/anaconda3/lib/python3.9/site-packages (4.6.0.66) Requirement already satisfied: numpy&gt;=1.19.3 in /Users/heji/opt/anaconda3/lib/python3.9/site-packages (from opencv-python) (1.21.5) . import cv2 import matplotlib.pyplot as plt import pandas as pd import numpy as np . Collecting opencv-python Downloading opencv_python-4.6.0.66-cp36-abi3-macosx_10_15_x86_64.whl (46.4 MB) |████████████████████████████████| 46.4 MB 613 kB/s eta 0:00:01 Requirement already satisfied: numpy&gt;=1.17.3 in /Users/heji/opt/anaconda3/lib/python3.9/site-packages (from opencv-python) (1.21.5) Installing collected packages: opencv-python Successfully installed opencv-python-4.6.0.66 . #drive.mount(&#39;/content/drive&#39;) . !wget https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/hw_img.png img =cv2.imread(&#39;hw_img.png&#39;) . --2022-09-23 16:22:35-- https://raw.githubusercontent.com/guebin/2021DV/master/_notebooks/hw_img.png Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ... Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 120618 (118K) [image/png] Saving to: &#39;hw_img.png&#39; hw_img.png 100%[===================&gt;] 117.79K --.-KB/s in 0.02s 2022-09-23 16:22:36 (7.03 MB/s) - &#39;hw_img.png&#39; saved [120618/120618] . img.shape . (531, 468, 3) . plt.imshow(img) . &lt;matplotlib.image.AxesImage at 0x7ff292852eb0&gt; . img_red = img * 0 img_green = img * 0 img_blue = img * 0 . img_red[...,0] = img[...,0] #이미지 색 분리하기 img_green[...,1] = img[...,1] img_blue[...,2] = img[...,2] . plt.imshow(img_red) . &lt;matplotlib.image.AxesImage at 0x7ff2723f8e50&gt; . img_red[:,:,0].shape . (531, 468) . plt.hist(img[:,:,0].reshape(-1)) #색의 히스토그램 그리기 . (array([ 369., 1419., 2494., 3906., 33232., 71030., 60306., 17593., 39230., 18929.]), array([ 28., 45., 62., 79., 96., 113., 130., 147., 164., 181., 198.]), &lt;BarContainer object of 10 artists&gt;) . _fig = plt.hist(img[:,:,0].reshape(-1),bins=255, range=[0,255]) #색의 범위는 0~255 . img2_red = cv2.equalizeHist(img[...,0]) plt.hist(img2_red.reshape(-1)) #히스토그램 평탄화작업 . (array([22189., 25646., 25483., 21440., 26638., 24418., 26942., 25299., 24005., 26448.]), array([ 0. , 25.5, 51. , 76.5, 102. , 127.5, 153. , 178.5, 204. , 229.5, 255. ]), &lt;BarContainer object of 10 artists&gt;) . _fig=plt.hist(img2_red.reshape(-1),bins=255,range=(0,255)) #검은색에서 하양색까지 색을 골고루 쓰게끔 . img2 = np.stack([img2_red,img2_red,img2_red],axis=-1) #빨강 이미지 세개 쌓기 . img2.shape . (531, 468, 3) . plt.imshow(img2) . &lt;matplotlib.image.AxesImage at 0x7ff292d21c40&gt; . plt.imshow(img) #원래 이미지, 회색 빛 . &lt;matplotlib.image.AxesImage at 0x7ff292c8ee50&gt; . 처음부터 흑백으로 불러오기 . img_black =cv2.imread(&#39;hw_img.png&#39;, 0) #흑백 버전으로 그림 불러오기 . img_black2 = cv2.equalizeHist(img_black) . plt.imshow(img_black2, cmap = &#39;gray&#39;) . &lt;matplotlib.image.AxesImage at 0x7ff280356af0&gt; . plt.imshow(np.concatenate([img_black,img_black2],axis=1),cmap=&#39;gray&#39;) . &lt;matplotlib.image.AxesImage at 0x7ff2a079d310&gt; .",
            "url": "https://g-gg-ggg.github.io/Oppps/python/2022/09/14/%EA%B3%BC%EC%A0%9C_%ED%9E%88%EC%8A%A4%ED%86%A0%EA%B7%B8%EB%9E%A8_%EC%9D%B4%ED%80%84%EB%9D%BC%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98.html",
            "relUrl": "/python/2022/09/14/%EA%B3%BC%EC%A0%9C_%ED%9E%88%EC%8A%A4%ED%86%A0%EA%B7%B8%EB%9E%A8_%EC%9D%B4%ED%80%84%EB%9D%BC%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://g-gg-ggg.github.io/Oppps/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://g-gg-ggg.github.io/Oppps/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "it’s me . listener | writer | student | . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://g-gg-ggg.github.io/Oppps/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://g-gg-ggg.github.io/Oppps/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}